{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","addMovie","useState","setTitle","titleIsEmpty","setTitleIsEmpty","setDescription","setImgUrl","imgUrlIsValid","setImgUrlIsValid","setImdbUrl","imdbUrlIsValid","setImdbUrlIsValid","setImdbId","imdbIdIsEmpty","setImdbIdIsEmpty","validURL","str","RegExp","test","onSubmit","event","preventDefault","newListOfMovies","type","name","placeholder","value","onChange","target","App","moviesFromServer","setMovies","moviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ebc952b.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport './NewMovie.scss';\n\ninterface Props {\n  addMovie: (moviesList: Movie[]) => void;\n  movies: Movie[];\n}\n\nexport const NewMovie: React.FC<Props> = ({ addMovie, movies }) => {\n  const [title, setTitle] = useState('');\n  const [titleIsEmpty, setTitleIsEmpty] = useState(false);\n\n  const [description, setDescription] = useState('');\n\n  const [imgUrl, setImgUrl] = useState('');\n  const [imgUrlIsValid, setImgUrlIsValid] = useState(false);\n\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbUrlIsValid, setImdbUrlIsValid] = useState(false);\n\n  const [imdbId, setImdbId] = useState('');\n  const [imdbIdIsEmpty, setImdbIdIsEmpty] = useState(false);\n\n  function validURL(str: string) {\n    // eslint-disable-next-line max-len\n    const pattern = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/); // fragment locator\n\n    return pattern.test(str);\n  }\n\n  const onAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setTitleIsEmpty(!title);\n\n    setImgUrlIsValid(!validURL(imgUrl));\n    setImdbUrlIsValid(!validURL(imdbUrl));\n\n    if (!imdbId) {\n      setImdbIdIsEmpty(true);\n    }\n\n    if (title\n      && description\n      && validURL(imgUrl)\n      && validURL(imdbUrl)\n      && imdbId) {\n      const mowieToAdd = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      const newListOfMovies = [mowieToAdd, ...movies];\n\n      addMovie(newListOfMovies);\n\n      setTitle('');\n      setDescription('');\n      setImgUrl('');\n      setImgUrlIsValid(false);\n      setImdbUrlIsValid(false);\n      setImdbUrl('');\n      setImdbId('');\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"add-movie-form\"\n        onSubmit={onAdd}\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          className={`\n          input\n          ${titleIsEmpty\n            && 'is-danger is-outlined empty-field'}`}\n          placeholder=\"Enter the title here\"\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n            setTitleIsEmpty(false);\n          }}\n        />\n\n        <textarea\n          name=\"description\"\n          className=\"textarea\"\n          placeholder=\"Enter description here\"\n          value={description}\n          onChange={(event) => {\n            setDescription(event.target.value);\n          }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"imgUrl\"\n          className={`\n          input\n          ${(imgUrlIsValid)\n            && 'is-danger is-outlined empty-field'}`}\n          placeholder=\"Please enter valid poster link here\"\n          value={imgUrl}\n          onChange={(event) => {\n            setImgUrl(event.target.value);\n            setImgUrlIsValid(!validURL(imgUrl));\n          }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"imdbUrl\"\n          className={`\n          input\n          ${(imdbUrlIsValid)\n            && 'is-danger is-outlined empty-field'}`}\n          placeholder=\"Please enter valid url link to movie here\"\n          value={imdbUrl}\n          onChange={(event) => {\n            setImdbUrl(event.target.value);\n            setImdbUrlIsValid(!validURL(imdbUrl));\n          }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"imdbId\"\n          className={`\n          input\n          ${imdbIdIsEmpty\n            && 'is-danger is-outlined empty-field'}`}\n          placeholder=\"Enter imdb ID here\"\n          value={imdbId}\n          onChange={(event) => {\n            setImdbId(event.target.value);\n            setImdbIdIsEmpty(false);\n          }}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"\n          button\n          is-primary\n          is-outlined\"\n        >\n          Add movie\n        </button>\n      </form>\n\n      <section\n        className=\"section\"\n      >\n        <p>\n          Hello! Here you can simply find a link to try adding a new movie.\n          Or you can go straight to the IMDB site and grab links from there.\n          If you enter at least one invalid link, the movie card will not be\n          added, but I am still thinking how to show you the link error.\n        </p>\n\n        <p>\n          Title:\n          <span className=\"has-text-info\">{' Notting Hill'}</span>\n        </p>\n\n        <p>\n          Description:\n          <span\n            className=\"has-text-info\"\n          >\n            {' The life of a simple bookshop owner changes when he meets'\n              + 'the most famous film star in the world.'}\n          </span>\n        </p>\n\n        <p>\n          URL link to Poster:\n          <span\n            className=\"has-text-info\"\n          >\n            {' https://m.media-amazon.com/images/M/MV5BMTE5OTkwYzYtNDhlNC00M'\n              + 'zljLTk1YTktY2IxZjliZmNjMjUzL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVy'\n              + 'MTQxNzMzNDI@._V1_.jpg'}\n          </span>\n        </p>\n\n        <p>\n          URL link to movie:\n          <span\n            className=\"has-text-info\"\n          >\n            {' https://www.imdb.com/title/tt0125439/?ref_=tt_sims_tt_i_3'}\n          </span>\n        </p>\n\n        <p>\n          ID:\n          <span\n            className=\"has-text-info\"\n          >\n            {' tt0125439'}\n          </span>\n        </p>\n      </section>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (moviesList: Movie[]) => {\n    setMovies(moviesList);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}